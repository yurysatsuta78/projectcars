// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projectcars;

#nullable disable

namespace projectcars.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241125151513_RolesAdded")]
    partial class RolesAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("projectcars.Entities.BrandEntity", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BrandId");

                    b.HasIndex("BrandName")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("projectcars.Entities.CarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Abs")
                        .HasColumnType("bit");

                    b.Property<bool>("AirBags")
                        .HasColumnType("bit");

                    b.Property<bool>("AirConditioner")
                        .HasColumnType("bit");

                    b.Property<bool>("Asr")
                        .HasColumnType("bit");

                    b.Property<bool>("AutonomousHeater")
                        .HasColumnType("bit");

                    b.Property<bool>("BlindSpotSensor")
                        .HasColumnType("bit");

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CarState")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ClimateControl")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("CruiseControl")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("DriveTrain")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ElectricSeats")
                        .HasColumnType("bit");

                    b.Property<int>("EnginePower")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("EngineVolume")
                        .HasMaxLength(10)
                        .HasColumnType("float");

                    b.Property<bool>("Esp")
                        .HasColumnType("bit");

                    b.Property<bool>("FrontElectroWindows")
                        .HasColumnType("bit");

                    b.Property<Guid>("GenerationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HeatedMirrors")
                        .HasColumnType("bit");

                    b.Property<bool>("HeatedSeats")
                        .HasColumnType("bit");

                    b.Property<bool>("HeatedSteeringWheel")
                        .HasColumnType("bit");

                    b.Property<bool>("HeatedWindshield")
                        .HasColumnType("bit");

                    b.Property<bool>("Immobilizer")
                        .HasColumnType("bit");

                    b.Property<string>("InteriorColor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("InteriorMaterial")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegistred")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTradable")
                        .HasColumnType("bit");

                    b.Property<int>("Mileage")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<bool>("PanoramicRoof")
                        .HasColumnType("bit");

                    b.Property<bool>("ParkingSensors")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasMaxLength(50)
                        .HasColumnType("float");

                    b.Property<int>("ProdYear")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<bool>("RainSensor")
                        .HasColumnType("bit");

                    b.Property<bool>("RearElectroWindows")
                        .HasColumnType("bit");

                    b.Property<bool>("RearViewCamera")
                        .HasColumnType("bit");

                    b.Property<string>("RegistrationCountry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("RoofRails")
                        .HasColumnType("bit");

                    b.Property<bool>("Signaling")
                        .HasColumnType("bit");

                    b.Property<bool>("SteeringWheelMultimedia")
                        .HasColumnType("bit");

                    b.Property<bool>("SunRoof")
                        .HasColumnType("bit");

                    b.Property<bool>("TowBar")
                        .HasColumnType("bit");

                    b.Property<string>("TransmissionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GenerationId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("projectcars.Entities.CityEntity", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CityId");

                    b.HasIndex("CityName")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("projectcars.Entities.GenerationEntity", b =>
                {
                    b.Property<Guid>("GenerationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EndYear")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("GenerationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Restyling")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.HasKey("GenerationId");

                    b.HasIndex("ModelId");

                    b.HasIndex("GenerationName", "ModelId")
                        .IsUnique();

                    b.ToTable("Generations");
                });

            modelBuilder.Entity("projectcars.Entities.ImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GenerationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId")
                        .IsUnique()
                        .HasFilter("[BrandId] IS NOT NULL");

                    b.HasIndex("CarId");

                    b.HasIndex("GenerationId")
                        .IsUnique()
                        .HasFilter("[GenerationId] IS NOT NULL");

                    b.HasIndex("ImageUrl")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("projectcars.Entities.ModelEntity", b =>
                {
                    b.Property<Guid>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ModelId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ModelName")
                        .IsUnique();

                    b.ToTable("Models");
                });

            modelBuilder.Entity("projectcars.Entities.RegionEntity", b =>
                {
                    b.Property<Guid>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("RegionId");

                    b.HasIndex("RegionName")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("projectcars.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("projectcars.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("projectcars.Entities.UserFavouriteCarEntity", b =>
                {
                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CarId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteCars");
                });

            modelBuilder.Entity("projectcars.Entities.UserRoleEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleEntity");
                });

            modelBuilder.Entity("projectcars.Entities.CarEntity", b =>
                {
                    b.HasOne("projectcars.Entities.CityEntity", "CityEntity")
                        .WithMany("CarEntities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projectcars.Entities.GenerationEntity", "GenerationEntity")
                        .WithMany("CarEntities")
                        .HasForeignKey("GenerationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityEntity");

                    b.Navigation("GenerationEntity");
                });

            modelBuilder.Entity("projectcars.Entities.CityEntity", b =>
                {
                    b.HasOne("projectcars.Entities.RegionEntity", "RegionEntity")
                        .WithMany("CityEntities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegionEntity");
                });

            modelBuilder.Entity("projectcars.Entities.GenerationEntity", b =>
                {
                    b.HasOne("projectcars.Entities.ModelEntity", "ModelEntity")
                        .WithMany("GenerationEntities")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelEntity");
                });

            modelBuilder.Entity("projectcars.Entities.ImageEntity", b =>
                {
                    b.HasOne("projectcars.Entities.BrandEntity", "BrandEntity")
                        .WithOne("ImageEntity")
                        .HasForeignKey("projectcars.Entities.ImageEntity", "BrandId");

                    b.HasOne("projectcars.Entities.CarEntity", "CarEntity")
                        .WithMany("ImageEntities")
                        .HasForeignKey("CarId");

                    b.HasOne("projectcars.Entities.GenerationEntity", "GenerationEntity")
                        .WithOne("ImageEntity")
                        .HasForeignKey("projectcars.Entities.ImageEntity", "GenerationId");

                    b.Navigation("BrandEntity");

                    b.Navigation("CarEntity");

                    b.Navigation("GenerationEntity");
                });

            modelBuilder.Entity("projectcars.Entities.ModelEntity", b =>
                {
                    b.HasOne("projectcars.Entities.BrandEntity", "BrandEntity")
                        .WithMany("ModelEntities")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrandEntity");
                });

            modelBuilder.Entity("projectcars.Entities.UserFavouriteCarEntity", b =>
                {
                    b.HasOne("projectcars.Entities.CarEntity", "CarEntity")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projectcars.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarEntity");
                });

            modelBuilder.Entity("projectcars.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("projectcars.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projectcars.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projectcars.Entities.BrandEntity", b =>
                {
                    b.Navigation("ImageEntity");

                    b.Navigation("ModelEntities");
                });

            modelBuilder.Entity("projectcars.Entities.CarEntity", b =>
                {
                    b.Navigation("ImageEntities");
                });

            modelBuilder.Entity("projectcars.Entities.CityEntity", b =>
                {
                    b.Navigation("CarEntities");
                });

            modelBuilder.Entity("projectcars.Entities.GenerationEntity", b =>
                {
                    b.Navigation("CarEntities");

                    b.Navigation("ImageEntity");
                });

            modelBuilder.Entity("projectcars.Entities.ModelEntity", b =>
                {
                    b.Navigation("GenerationEntities");
                });

            modelBuilder.Entity("projectcars.Entities.RegionEntity", b =>
                {
                    b.Navigation("CityEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
